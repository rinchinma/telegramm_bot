import datetime
from pprint import pprint

import requests
import json
import re
import telebot.types
from config_data.config import RAPID_API_KEY
from loader import bot
from loguru import logger
from database.models import db, HistoryUsers


headers = {
    "X-RapidAPI-Host": "hotels4.p.rapidapi.com",
    "X-RapidAPI-Key": RAPID_API_KEY
}


@logger.catch
def request_to_api(url: str, querystring: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞

    :param url: url —Å–∞–π—Ç–∞
    :param querystring: –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    :return: –û—Ç–≤–µ—Ç —Å–∞–π—Ç–∞
    """

    try:
        response = requests.request("GET", url, headers=headers, params=querystring, timeout=20)  # 60
        if response.status_code == requests.codes.ok:
            return response
    except requests.exceptions.ReadTimeout:
        print('API error')


@logger.catch
def city_founding(city='New York') -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞

    :param city: –ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ city_group (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù—å—é-–ô–æ—Ä–∫)
    :return: —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞
    """

    if bool(re.search('[–∞-—è–ê-–Ø]', city)):
        locale = "ru_RU"
    else:
        locale = "en_US"

    url = "https://hotels4.p.rapidapi.com/locations/v2/search"
    querystring = {"query": city, "locale": locale, "currency": "USD"}

    response = request_to_api(url=url, querystring=querystring)
    pattern = r'(?<="CITY_GROUP",).+?[\]]'

    find = re.search(pattern, response.text)
    city_res = json.loads(f"{{{find[0]}}}")

    cities = list()
    for index, elem in enumerate(city_res['entities']):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cities.append({'city_name': elem['name'], 'destination_id': elem['destinationId']})
    # for elem in city_res['entities']:
    #     cities.append({'city_name': elem['name'], 'destination_id': elem['destinationId']})

    return cities


@logger.catch
def hotel_founding(city_id, command="lowprice", page="1") -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π

    :param city_id: id —Ä–∞–π–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞
    :return: –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞
    """

    url = "https://hotels4.p.rapidapi.com/properties/list"

    if command == 'high_price':
        sort_order = 'PRICE_HIGHEST_FIRST'
    else:
        sort_order = 'PRICE'

    querystring = {"destinationId": city_id, "pageNumber": page, "pageSize": "25",
                   "checkIn": "2024-01-08", "checkOut": "2024-01-15", "adults1": "1",  # 2020-01-08 2020-01-15
                   "sortOrder": sort_order, "locale": "en_US", "currency": "USD"}

    response = request_to_api(url=url, querystring=querystring)
    price_find = re.search(r'(?<=,)"results":.+?(?=,"pagination)', response.text)

    if price_find:
        data = json.loads(f'{{{price_find[0]}}}')
        hotels_list = data['results']
        return hotels_list


@logger.catch
def photo_founding(hotel_id) -> json:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ

    :param hotel_id: id –æ—Ç–µ–ª—è
    :return: json –¥–ª—è —Ñ–æ—Ç–æ
    """

    url = "https://hotels4.p.rapidapi.com/properties/get-hotel-photos"
    querystring = {"id": hotel_id}

    response = request_to_api(url=url, querystring=querystring)

    pattern = r'(?<=,)"hotelImages":.+?(?=,"roomImages)'
    find_photo = re.search(pattern, response.text)

    if find_photo:
        data = json.loads(f'{{{find_photo[0]}}}')
        return data


@logger.catch
def best_deal_founding(bot_data):  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –±–µ—Å—Ç–¥–∏–ª
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π (–∏–∑ hotel_founding)

    :param bot_data: –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """

    hotels_result = list()

    for page in range(1, 4):
        hotels = hotel_founding(city_id=bot_data['city_area_id'], command='bestdeal', page=str(page))
        if hotels:
            counter = 0
            for hotel in hotels:
                if counter == bot_data['quantity_hotels']:
                    return hotels_result
                elif hotel["landmarks"][0].get("distance"):
                    distance_from_api = hotel["landmarks"][0]["distance"].split()[0].replace(',', '.')  # !
                    # price_from_api = hotel["ratePlan"]["price"]["exactCurrent"]
                    if hotel.get("ratePlan").get("price").get("exactCurrent"):
                        price_from_api = hotel["ratePlan"]["price"]["exactCurrent"]
                        if float(bot_data['min_distance']) <= \
                                float(distance_from_api) <= \
                                float(bot_data['max_distance']):
                            if float(bot_data['min_price']) <= float(price_from_api) <= float(bot_data['max_price']):
                                hotels_result.append(hotel)
                                counter += 1


@logger.catch
def create_hotel_message(bot_data, days_count, user_id, photo_quantity=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª—è—Ö

    :param bot_data: —Å–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param days_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param photo_quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ

    :return: None
    """

    count = 0
    data_base_str = ''

    if bot_data['command'] == 'bestdeal':
        hotels_list = best_deal_founding(bot_data)
    else:
        hotels_list = hotel_founding(city_id=bot_data['city_area_id'], command=bot_data['command'])

    if hotels_list is None:
        bot.send_message(user_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –æ—Ç–µ–ª–µ–π(( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        quantity_hotels = len(hotels_list)
        if 1 <= quantity_hotels < bot_data['quantity_hotels']:
            bot.send_message(user_id, 'üè®–ù–∞—à–ª–æ—Å—å –ª–∏—à—å {numbers} –æ—Ç–µ–ª–µ–π'.format(numbers=quantity_hotels))
            bot_data['quantity_hotels'] = quantity_hotels
        else:
            bot.send_message(user_id, 'üè®–û—Ç–µ–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ:')

        for hotel in hotels_list:
            price_for_one_day = float(hotel.get('ratePlan').get('price').get('exactCurrent'))
            full_price = round(price_for_one_day * days_count, 2)

            text = '–û—Ç–µ–ª—å: {hotel_name}\n–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {hotel_price}\n ' \
                   '–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {days} –Ω–æ—á–µ–π: ${full_price}\n ' \
                   '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {hotel_distance}\n'.format(
                hotel_name=hotel.get('name'),
                hotel_price=hotel.get('ratePlan').get('price').get('current'),
                days=days_count,
                full_price=full_price,
                hotel_distance=hotel.get('landmarks')[0].get('distance'))

            data_base_str += '_' + str(count) + ' ' + hotel.get('name')

            if hotel.get('guestReviews').get('rating'):
                text += '\n–†–µ–π—Ç–∏–Ω–≥: {hotel_rating}'.format(hotel_rating=hotel["guestReviews"]["rating"])

            if hotel.get('address').get('streetAddress'):
                text += '\n–ê–¥—Ä–µ—Å: {hotel_address}'.format(hotel_address=hotel["address"]["streetAddress"])

            if hotel.get('optimizedThumbUrls').get('srpDesktop'):
                text += '\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –æ—Ç–µ–ª—è: hotels.com/ho{id_hotel}'.\
                    format(id_hotel=hotel["id"])

            if count >= bot_data['quantity_hotels']:
                break
            else:
                if photo_quantity is None:
                    bot.send_message(user_id, text)  # !
                else:
                    photo_data = photo_founding(hotel_id=hotel['id'])
                    photo_list = list()

                    photo_dict = telebot.types.InputMediaPhoto(
                        photo_data["hotelImages"][0]["baseUrl"].format(size='y'), text)
                    photo_list.append(photo_dict)

                    for num in range(photo_quantity - 1):
                        photo_dict = telebot.types.InputMediaPhoto(
                            photo_data["hotelImages"][num + 1]["baseUrl"].format(size='y'))
                        photo_list.append(photo_dict)

                    bot.send_media_group(user_id, photo_list)
            count += 1

    with db:
        HistoryUsers.create_table()
        HistoryUsers.create(id_user=user_id, chosen_city=bot_data['city'],
                            date=datetime.datetime.now().strftime("%m/%d/%Y %H:%M"),
                            command_choice=bot_data['command'], result_command=data_base_str)




